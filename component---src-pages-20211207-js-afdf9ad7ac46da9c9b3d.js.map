{"version":3,"file":"component---src-pages-20211207-js-afdf9ad7ac46da9c9b3d.js","mappings":"mRAUAA,EAAAA,EAAAA,KACO,IACDC,EAAc,CAClBC,aAF0B,IAKb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,WAKT,UAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,+BACA,sEACA,2BACE,aAAGC,WAAW,cAAd,8CAEF,oBACA,mCACA,qIACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,6QAHR,eAoBA,4BAAc,sBAAYA,WAAW,KAAvB,SAAd,MAAqE,sBAAYA,WAAW,KAAvB,eAArE,eACA,6GACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,6LAHR,eAaA,4DACA,iEACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,kNAHR,eAaA,qDAAuC,sBAAYA,WAAW,KAAvB,wBAAvC,eACA,kDACA,2BAAa,sBAAYA,WAAW,KAAvB,wBAAb,kBACA,8BAAgB,sBAAYA,WAAW,KAAvB,WAAhB,kEACA,uBACF,wBACE,kBAAQC,OAAM,iCAAkCC,EAAAA,EAAAA,KAAYC,KAAK,gBACjE,eAAKC,IAAG,iCAAkCF,EAAAA,EAAAA,KAAYG,IAAI,OAE5D,2CAEE,mCACA,gDACA,0EACA,0HACA,uBACF,wBACE,kBAAQJ,OAAM,6BAA8BC,EAAAA,EAAAA,KAAYC,KAAK,gBAC7D,eAAKC,IAAG,6BAA8BF,EAAAA,EAAAA,KAAYG,IAAI,OAExD,4CAEE,sCACA,uBACF,wBACE,kBAAQJ,OAAM,yBAA0BC,EAAAA,EAAAA,KAAYC,KAAK,gBACzD,eAAKC,IAAG,yBAA0BF,EAAAA,EAAAA,KAAYG,IAAI,OAEpD,kDAEE,6GACA,0LACA,oBACA,+BACA,oGACA,yCAA2B,kBAAQL,WAAW,KAAnB,QAA3B,SAKJJ,EAAWU,gBAAiB,E,4CCnD5B,MA1DA,WACE,IAAMC,EAAW,uBACXC,EAAY,oBACZC,EAAY,2BACZC,EAAe,aACfC,EAAiBD,EAAaE,QAAQ,MAAO,IAC7CC,EAAcN,EAAcI,EAC5BG,EAAYP,EAAc,KAAOI,EACjCI,EAAW,aAEjB,OACE,QAAC,IAAD,MACE,QAAC,EAAAC,UAAD,CACEC,MAAUR,EAAL,MAAoBD,EACzBU,YAAaH,EACbI,UAAWN,EACXO,SAAU,CAAC,CACTC,SAAU,WACVC,QAAS,yCAEXC,UAAW,CACTpB,KAAM,UACNc,MAAOT,EACPU,YAAaT,EACbe,IAAKX,EACLY,OAAQ,CAAC,CAAED,IAAKV,EAAY,kBAGhC,mBAASY,UAAWC,EAAAA,KAClB,kBAAKlB,IACL,qBAAQM,IACR,oBAAOL,IACP,wBACE,kBAAQT,OAAM,MAAQU,EAAR,kBAAuCT,EAAAA,EAAAA,KAAYC,KAAK,gBACtE,eAAKC,IAAG,MAAQO,EAAR,iBAAsCT,EAAAA,EAAAA,KAAYG,IAAI,OAEhE,QAAC,EAAD,OACA,kBAAQqB,UAAWC,EAAAA,IAAnB,UAEF,sBAAO,QAAC,IAAD,QACP,QAAC,IAAD,CACEC,gBAAe,YACfC,cAAe,gBACfC,YAAW,YACXC,UAAW,kDASb,QAAC,IAAD","sources":["webpack://dev1studio/./src/contents/20211207.mdx","webpack://dev1studio/./src/pages/20211207.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`Image Assets과 Inherit(상속)을 중점적으로 두 가지 방식을 비교합니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`이 글에서는 CSS 보다는 필자가 좋아하는 Sass 기준으로 설명합니다.`}</p>\n    </blockquote>\n    <hr></hr>\n    <h2>{`Image Assets`}</h2>\n    <p>{`emotion styled로는 import로 image를 불러와서 쓸 수 있습니다. image는 2가지 방식으로 불러와서 쓸 수 있는데 /src/assets/index.js 파일을 만들어 관리합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// /src/assets/index.js\n\nexport const images = {\n  icons: {\n    instagram: require('./images/icons/instagram.svg'),\n    ...,\n  },\n  backgrounds: {\n    primaryHeader: require('./images/backgrounds/primary-header.png'),\n    ...,\n  },\n}\n\nexport default {}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`코드에 있는 `}<inlineCode parentName=\"p\">{`icons`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`backgrounds`}</inlineCode>{`는 디렉토리입니다.`}</p>\n    <p>{`Next.js 기반이라면 용량이 작은 이미지라면 컴파일시 자동으로 base64 코드로 직접 스타일 파일에 들어갑니다. 이름은 camelCase로 작성합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import { images } from '../../assets'\n\nconst Primary = styled.div({\n  width: '100%',\n  height: '2rem',\n  background: \\`url(\\${images.icons.instagram}) no-repeat 50% 50%/contain\\`,\n})`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`불러올 때는 위와 같이 images를 import를 해서 사용합니다.`}</p>\n    <p>{`아래와 같이 이미지 파일을 수동으로 import해서 사용하는 것도 가능합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import IconInstagram from '../../assets/images/icons/instagram.svg'\n\nconst Primary = styled.div({\n  width: '100%',\n  height: '2rem',\n  background: \\`url(\\${IconInstagram}) no-repeat 50% 50%/contain\\`,\n})`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`이 경우는 이미지 파일을 직접 import를 하기 때문에 `}<inlineCode parentName=\"p\">{`/src/assets/index.js`}</inlineCode>{`는 필요 없습니다.`}</p>\n    <p>{`단, 디렉토리명과 파일명을 기억하고 있어야 합니다.`}</p>\n    <p>{`Sass는 `}<inlineCode parentName=\"p\">{`/src/assets/index.js`}</inlineCode>{`를 불러올 수 없습니다.`}</p>\n    <p>{`Sass인 경우 `}<inlineCode parentName=\"p\">{`/public`}</inlineCode>{`에 존재하는 이미지만 불러올 수 있기 때문에 이미지가 수정되었을 때 인지하지 못하는 문제가 생길 수 있습니다.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20211207/emotion-win.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20211207/emotion-win.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>이모션이 이겨따ㅏㅏㅏ</figcaption>\n    </figure>\n    <h2>{`Inherit (상속)`}</h2>\n    <p>{`CSS는 상속에 따라서 적용 순서가 달라집니다.`}</p>\n    <p>{`emotion styled는 1단계 상속이고, CSS는 선택자에 따라 레벨 상속이 달라집니다.`}</p>\n    <p>{`그래서 Class 상속을 받은 상태라면 CSS에서 적용한 코드가 emotion styled로 작성한 코드보다 우선 적용되어 emotion styled로 작성한 코드는 취소 됩니다.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20211207/css-win.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20211207/css-win.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>싸쓰가 이겨따데스!!!</figcaption>\n    </figure>\n    <h2>{`그래서 뭐가 좋다는 거야?!`}</h2>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20211207/cat.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20211207/cat.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>아직 한 발 남았단다 나의 고양이</figcaption>\n    </figure>\n    <p>{`emotion styled는 jsx에 직접 작성하는 코드라서 styled 안의 코드가 변경되면 브라우저에서는 해당 영역이 다시 re-rendering됩니다.`}</p>\n    <p>{`하지만 image assets 관리가 편하기 때문에 필자는 최소한 background image 불러올 때는 무조건 emotion styled로 작성합니다. emotion styled는 props에 따라 스타일 관리도 편하기 때문에 이것도 emotion styled의 장점이라 할 수 있겠네요.`}</p>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`이번 글은 Class 상속 개념을 이미 알고 있지 않다면 이해하기 힘든 글입니다. 상속 개념에 대해서는 기회가 된다면 언젠가 다뤄보겠습니다.`}</p>\n    <p>{`그럼 다음 글에서 만나요! 다음 글 `}<strong parentName=\"p\">{`관많부!`}</strong>{` : )`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\n// import { Disqus } from 'gatsby-plugin-disqus'\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20211207'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = 'emotion vs. Sass 승자는?!..'\n  const pageDateTime = '2021.12.07'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const ogAddress = siteAddress + '0/' + pageIdentifier\n  const subTitle = '이기는 놈이 내 편'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'style, emotion, Sass, 스타일, 이모션, 퍼블리싱'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: ogAddress + '/cat.jpeg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/0/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/0/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        previousAddress={`/20211205`}\n        previousTitle={'macOS 필수 설치 앱'}\n        nextAddress={`/20211210`}\n        nextTitle={'한글이나 히라가나 등의 non-English 언어로 변수명을 작명해도 동작할까?'}\n      />\n      {/* <Disqus\n        config={{\n          url: pageAddress,\n          identifier: pageIdentifier,\n          title: pageTitle,\n        }}\n      /> */}\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","srcSet","uuidv4","type","src","alt","isMDXComponent","siteAddress","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","ogAddress","subTitle","GatsbySeo","title","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","previousAddress","previousTitle","nextAddress","nextTitle"],"sourceRoot":""}