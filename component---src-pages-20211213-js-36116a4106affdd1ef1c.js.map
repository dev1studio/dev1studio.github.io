{"version":3,"file":"component---src-pages-20211213-js-36116a4106affdd1ef1c.js","mappings":"2RAWAA,EAAAA,EAAAA,KACO,IACDC,EAAc,CAClBC,aAF0B,IAKb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,WAKT,UAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,+BACA,sCAAwB,sBAAYC,WAAW,KAAvB,0BAAxB,uBACA,4EACA,oBACA,8BACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,mNAHR,eAqBA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,wCAHR,eAOA,2CACA,2DACA,wCACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,oMAHR,eAqBA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,wCAHR,eAOA,gFACA,+CACA,iCACE,SAAY,OADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,0KAHR,eAmBA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,wCAHR,eAOA,kBAAG,sBAAYA,WAAW,KAAvB,kBAAH,2CACA,uBACF,wBACE,kBAAQC,OAAM,2BAA4BC,EAAAA,EAAAA,KAAYC,KAAK,gBAC3D,eAAKC,IAAG,2BAA4BF,EAAAA,EAAAA,KAAYG,IAAI,OAEtD,oCAEE,oBACA,+BACA,6HAKJT,EAAWU,gBAAiB,E,4CCrE5B,MAnDA,WACE,IAAMC,EAAW,uBACXC,EAAY,oBACZC,EAAY,sBACZC,EAAe,aACfC,EAAiBD,EAAaE,QAAQ,MAAO,IAC7CC,EAAcN,EAAcI,EAC5BG,EAAYP,EAAc,KAAOI,EACjCI,EAAW,iBAEjB,OACE,QAAC,IAAD,MACE,QAAC,EAAAC,UAAD,CACEC,MAAUR,EAAL,MAAoBD,EACzBU,YAAaH,EACbI,UAAWN,EACXO,SAAU,CAAC,CACTC,SAAU,WACVC,QAAS,yCAEXC,UAAW,CACTpB,KAAM,UACNc,MAAOT,EACPU,YAAaT,EACbe,IAAKX,EACLY,OAAQ,CAAC,CAAED,IAAKV,EAAY,oBAGhC,mBAASY,UAAWC,EAAAA,KAClB,kBAAKlB,IACL,qBAAQM,IACR,oBAAOL,IACP,wBACE,kBAAQT,OAAM,MAAQU,EAAR,kBAAuCT,EAAAA,EAAAA,KAAYC,KAAK,gBACtE,eAAKC,IAAG,MAAQO,EAAR,iBAAsCT,EAAAA,EAAAA,KAAYG,IAAI,OAEhE,QAAC,EAAD,OACA,kBAAQqB,UAAWC,EAAAA,IAAnB,UAEF,sBAAO,QAAC,IAAD,QACP,QAAC,IAAD,CACEC,gBAAe,YACfC,cAAe,qCACfC,YAAW,YACXC,UAAW,qBAEb,QAAC,IAAD","sources":["webpack://dev1studio/./src/contents/20211213.mdx","webpack://dev1studio/./src/pages/20211213.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport LinkButton from '../components/utilities/linkButton';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`이전 글에서도 언급했지만 문득 `}<inlineCode parentName=\"p\">{`한글로 변수명을 만들어도 잘 동작하는가?`}</inlineCode>{`에 대한 의문이 항상 있었습니다.`}</p>\n    <p>{`이 글에서는 한글로 여러 방법으로 변수명을 만들어보고 멍청하게 동작하는 부분은 없는지 확인합니다.`}</p>\n    <hr></hr>\n    <h2>{`텍스트 테스트`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import styled from '@emotion/styled'\n\nconst Container = styled.div({\n  display: 'flex',\n})\n\nfunction Home() {\n  return (\n    <Container>\n      헬로 월드!\n    </Container>\n  )\n}\n\nexport default Home`}</code>{`\n        `}</deckgo-highlight-code>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div class=\"css-k008qs\">헬로 월드!</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`여기서 문제가 생기면 당연히 안되겠죠?`}</p>\n    <p>{`한글을 못 쓰면 React로는 영어로만 개발이 가능하다는 거니까요.`}</p>\n    <h2>{`변수 테스트 1: emotion`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import styled from '@emotion/styled'\n\nconst 콘테이너 = styled.div({\n  display: 'flex',\n})\n\nfunction Home() {\n  return (\n    <콘테이너>\n      한글 테스트\n    </콘테이너>\n  )\n}\n\nexport default Home`}</code>{`\n        `}</deckgo-highlight-code>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div class=\"css-k008qs\">헬로 월드!</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`변수명만 변경되서 그런지 class 이름도 변경이 이루어지지 않고 렌더링 되었습니다. (이건 의외...)`}</p>\n    <h2>{`변수 테스트 2: export default`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import styled from '@emotion/styled'\n\nconst 콘테이너 = styled.div({\n  display: 'flex',\n})\n\nconst 홈 = () => {\n  <콘테이너>\n    한글 테스트\n  </콘테이너>\n}\n\nexport default 홈`}</code>{`\n        `}</deckgo-highlight-code>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div class=\"css-k008qs\">헬로 월드!</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><inlineCode parentName=\"p\">{`export default`}</inlineCode>{`에 사용하는 변수명도 한글로 작성해도 특별한 문제가 보이지는 않네요.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20211213/sibam.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20211213/sibam.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>이왜진?</figcaption>\n    </figure>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`다음에는 function, component를 다루며 여기서 추가로 component에 한글로 지어진 변수명의 값이 제대로 '받기'와 '보내기'가 되는지 테스트해보는 글을 써보겠습니다.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20211213'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = '`한글`로 변수 만들어도 동작할까?'\n  const pageDateTime = '2021.12.13'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const ogAddress = siteAddress + '0/' + pageIdentifier\n  const subTitle = 'Hangeul arayo?'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'react, variable, hangul, 리액트, 변수, 한글'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: ogAddress + '/sibam.jpeg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/0/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/0/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        previousAddress={`/20211212`}\n        previousTitle={'Apple Silicon macOS에 Homebrew 설치하기'}\n        nextAddress={`/20211214`}\n        nextTitle={'`한글`로 컴포넌트 만들기!'}\n      />\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","srcSet","uuidv4","type","src","alt","isMDXComponent","siteAddress","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","ogAddress","subTitle","GatsbySeo","title","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","previousAddress","previousTitle","nextAddress","nextTitle"],"sourceRoot":""}