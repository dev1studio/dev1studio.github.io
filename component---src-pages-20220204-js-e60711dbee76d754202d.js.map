{"version":3,"file":"component---src-pages-20220204-js-e60711dbee76d754202d.js","mappings":"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","sources":["webpack://dev1studio/./src/components/utilities/codeSandbox.js","webpack://dev1studio/./src/components/utilities/youTube.js","webpack://dev1studio/./src/contents/20220204.mdx","webpack://dev1studio/./src/pages/20220204.js"],"sourcesContent":["import * as React from \"react\"\n\nfunction CodeSandboxPreview({ SENDBOX_TITLE }) {\n  return (\n    <iframe\n      src={`https://codesandbox.io/embed/github/naninyang/${SENDBOX_TITLE}/tree/main/?fontsize=14&hidenavigation=1&theme=dark`}\n      title={`${SENDBOX_TITLE}`}\n      allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n    />\n  )\n}\n\nexport default CodeSandboxPreview\n","import * as React from \"react\"\n\nfunction YouTubeVideo({ VIDEO_ID }) {\n  return (\n    <iframe\n      width=\"560\" height=\"315\"\n      src={`https://www.youtube.com/embed/${VIDEO_ID}`}\n      title=\"YouTube video player\"\n      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n      allowFullScreen={true}\n    />\n  )\n}\n\nexport default YouTubeVideo\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport YouTubeVideo from '../components/utilities/youTube';\nimport CodeSandboxPreview from '../components/utilities/codeSandbox';\nimport LinkButton from '../components/utilities/linkButton';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`이번 글에서는 Angular, React, Svelte, 그리고 Vue에서는 어떻게 스타일링 코드를 작성해야하는지, CSS 파일은 어떻게 작성해야하는지 알려드립니다.`}</p>\n    <p>{`이 글은 원래 지난 글에 통합할 예정이었는데 생각보다 지난 글 내용이 너무 길어져서 분리했습니다.`}</p>\n    <p>{`이 글은 지난 글과 마찬가지로 포스타입에 올렸던 글을 통합한 글이며, 스타일과 CSS로 각각 분리되어있던 내용을 하나로 합친 글입니다.`}</p>\n    <hr></hr>\n    <h2>{`Inline 방식`}</h2>\n    <p>{`If, HTML`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<p style=\"color: hotpink; font-size: 1rem\">헬로 월드</p>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If, Angular`}</p>\n    <p>{`위 HTML 방식처럼 `}<inlineCode parentName=\"p\">{`style=\"...\"`}</inlineCode>{` 방식을 사용할 수도 있고, 아래와 같이 class형을 사용할 수도 있습니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"typescript\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`@Component({\n  selector: 'app-hello',\n  template: '<p [style.color]=\"color\" [style.fontSize]=\"fontSize\">헬로 월드</p>',\n  styles: [],\n})\nexport class HelloWorldComponent implements OnInit {\n  color: string = 'hotpink';\n  fontSize: string = '1rem';\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If, React`}</p>\n    <p>{`방식 #1.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`function HelloWorldComponent() {\n  return <div style={{ color: 'hotpink', fontSize: '1rem' }}>헬로 월드</div>\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`방식 #2.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`const styleObject = {\n  color: 'hotpink',\n  fontSize: '1rem',\n};\n\nfunction HelloWorldComponent() {\n  return <div style={styleObject}>헬로 월드</div>\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If, Svelte`}</p>\n    <p>{`Svelte도 Angular처럼 HTML 예제와 같은 방식으로 인라인 스타일을 구현할 수 있습니다. 참고하세요.`}</p>\n    <p>{`방식 #1.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<!-- Parent Component -->\n<script>\n  import Styling from './Styling.svelte';\n</script>\n\n<Styling color=\"hotpink\" fontSize=\"1rem\" />\n\n<!-- Styling Component -->\n<script>\n  export let color;\n  export let fontSize;\n</script>\n\n<p style=\"color: {color}; font-size: {fontSize}\">\n  헬로 월드\n</p>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`방식 #2.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<!-- Parent Component -->\n<script>\n  import StyleObject from './StyleObject.svelte';\n</script>\n\n<StyleObject ref=\"hotpink\" />\n\n<style>\n  :global([ref=hotpink]) {\n    color: hotpink;\n    font-size: 1rem;\n  }\n</style>\n\n<!-- StyleObject Component -->\n<script>\n  export let ref;\n</script>\n\n<p {ref}>\n  헬로 월드\n</p>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If, Vue`}</p>\n    <p>{`방식 #1.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div v-bind:style=\"{ color: color, fontSize: fontSize + 'rem' }\">헬로 월드</div>\n<script>\n  data: {\n    color: 'hotpink',\n    fontSize: 1\n  }\n</script>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`방식 2.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div v-bind:style=\"styleObject\">헬로 월드</div>\n<script>\n  data: {\n    styleObject: {\n      color: 'hotpink',\n      fontSize: '1rem'\n    }\n  }\n</script>`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`emotion 사용하기`}</h2>\n    <p>{`If, React`}</p>\n    <p>{`형태는 inline과 비슷한데 차이점이라면 변수 자체가 태그처럼 사용된다는 점입니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`const HelloWorld = styled.div({\n  fontSize: '1rem',\n  color: 'hotpink',\n})\n\nfunction Home() {\n  return <HelloWorld>헬로 월드</HelloWorld>\n}\n\nexport default Home`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If, Svelte`}</p>\n    <p>{`Svelte에서는 React와 다르게 변수 형태로 사용 가능합니다.`}</p>\n    <p>{`그리고 React에서는 emotion을 위 예제처럼 return하는 파일에 포함해서 작성이 가능하지만 Svelte에서는 따로 `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` 파일로 분리해야한다는 점이 존재합니다.`}</p>\n    <p>{`또한 `}<inlineCode parentName=\"p\">{`styled.tag({})`}</inlineCode>{`가 아니라 `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` 형태로만 작성이 가능합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"javascript\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// styles.js\n\nconst { css } = emotion;\n\nexport const helloWorld = css\\`\n  font-size: 1rem;\n  color: hotpink\n\\`;`}</code>{`\n        `}</deckgo-highlight-code>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<script>\n  import { helloWorld } from './styles.js';\n</script>\n\n<div class=\"{helloWorld}\">헬로 월드</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`emotion이 class 이름 형태로 사용되기 때문에 class를 2개 이상 사용하여 조합이 가능합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"javascript\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// styles.js\n\nconst { css } = emotion;\n\nexport const hello = css\\`\n  font-size: 1rem\n\\`;\n\nexport const world = css\\`\n  color: hotpink\n\\`;`}</code>{`\n        `}</deckgo-highlight-code>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<script>\n  import { hello, world } from './styles.js';\n</script>\n\n<div class=\"{hello} {world}\">헬로 월드</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Global CSS`}</h2>\n    <p>{`React와 Next.js에서는 대개 `}<inlineCode parentName=\"p\">{`global.css`}</inlineCode>{`라는 파일명을 사용합니다. 따로 설정이 필요하지 않습니다.`}</p>\n    <p>{`Sass 사용시 `}<inlineCode parentName=\"p\">{`global.sass`}</inlineCode>{` 파일명을 사용하면 됩니다. 다만, React에서 Sass 사용시 추가로 import 해야하는 패키지가 있습니다.`}</p>\n    <p>{`이 패키지에 대해서는 아래 Sass 설명 부분을 참고하세요.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`.hello-world {\n  font-size: 1rem;\n  color: hotpink;\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Svelte에서는 `}<inlineCode parentName=\"p\">{`.css`}</inlineCode>{` 파일을 따로 사용하지 않고 `}<inlineCode parentName=\"p\">{`.svelte`}</inlineCode>{` 내부에서 `}<inlineCode parentName=\"p\">{`:global(선택자)`}</inlineCode>{` 형태로 작성됩니다. (`}<inlineCode parentName=\"p\">{`Vue`}</inlineCode>{` 동일)`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<style>\n  :global(.hello-world) {\n    font-size: 1rem;\n    color: hotpink\n  }\n</style>`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`CSS 사용하기`}</h2>\n    <p>{`React에서는 Global CSS가 아닌 CSS 즉, CSS Module이 아니어도 CSS 파일 import가 가능합니다. 이렇게 했을 때는 className이 중복 사용되어 유지보수가 힘들어지는 부분을 간과하면 안됩니다.`}</p>\n    <p>{`Next.js는 Global CSS가 아닌 이상은 CSS Module 형태로만 사용이 가능합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// className={componentName.camelCase} 또는 className={componentName['kabob-case']}\nimport styles from './HelloWorld.module.css'\n\nfunction Home() {\n  return <div className={styles['hello-world']}>헬로 월드</div>\n}\n\nexport default Home`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`주석으로 설명했지만 하이픈(-)을 사용할 게 아니라면 `}<inlineCode parentName=\"p\">{`componentName.camelCase`}</inlineCode>{` 형태도 가능하지만 하이픈을 사용할 거라면 반드시 `}<inlineCode parentName=\"p\">{`componentName['kabob-case']`}</inlineCode>{` 형태를 사용해야 합니다.`}</p>\n    <p>{`다음은 2개 이상의 className을 사용하는 예제입니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import styles from './HelloWorld.module.css'\n\nfunction Home() {\n  return <div className={\\`\\${styles.hello} \\${styles.world}\\`}>헬로 월드</div>\n}\n\nexport default Home`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Svelte에서는 Global이 아닌 CSS 형태의 코드는 알아서 CSS Module 형태로 동작합니다. 단, `}<inlineCode parentName=\"p\">{`class=\"...\"`}</inlineCode>{` 형태가 아닌 `}<inlineCode parentName=\"p\">{`class:...`}</inlineCode>{` 형태로 불러와야 합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<style>\n  .hello-world {\n    font-size: 1rem;\n    color: hotpink\n  }\n</style>\n\n<div class:hello-world>헬로 월드</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`class를 여러개 쓰기 위해서는 `}<inlineCode parentName=\"p\">{`class:name1 name2`}</inlineCode>{`라던가 `}<inlineCode parentName=\"p\">{`class:name1+name2`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`class:name1,name2`}</inlineCode>{`가 아닌 `}<inlineCode parentName=\"p\">{`class:name1 class:name2`}</inlineCode>{`처럼 써야 합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<style>\n  .hello {\n    font-size: 1rem;\n  }\n  .world {\n    color: hotpink;\n  }\n</style>\n\n<div class:hello class:world>헬로 월드</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`Sass 사용하기`}</h2>\n    <p>{`React는 `}<inlineCode parentName=\"p\">{`sass`}</inlineCode>{` 패키지가 필요합니다.`}</p>\n    <p>{`파일을 불러올 때는 `}<inlineCode parentName=\"p\">{`.css`}</inlineCode>{`가 아닌 `}<inlineCode parentName=\"p\">{`.sass`}</inlineCode>{` 파일을 import 해야 합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`## npm\n$ npm i -D sass\n\n## Yarn\n$ yarn add -D sass`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Svelte에서는 `}<inlineCode parentName=\"p\">{`sass`}</inlineCode>{`가 아닌 `}<inlineCode parentName=\"p\">{`node-sass`}</inlineCode>{`를 씁니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`## npm\n$ npm i -D svelte-preprocess node-sass\n\n## Yarn\n$ yarn add -D svelte-preprocess node-sass`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`React와 Next.js에서는 sass관련해서 최신 버전이라면 따로 추가 세팅이 필요 없는데 Svelte에서는 `}<inlineCode parentName=\"p\">{`svelte-preprocess`}</inlineCode>{` 패키지를 활용해야 하므로 추가 세팅이 필수입니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"javascript\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// rollup.config.js\n\n// 상단에 추가\nimport autoPreprocess from 'svelte-preprocess';\n\n// plugins preprocess 추가\nexport default {\n  plugins: [\n    svelte({\n      preprocess: autoPreprocess(),\n      ...\n    })\n  ]\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Svelte는 `}<inlineCode parentName=\"p\">{`.sass`}</inlineCode>{`파일을 import해서 사용하는 게 아니라 inline 형태로 불러와야 하기 때문에 type 세팅이 들어가야 합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<style type=\"text/sass\">\n  .hello-world\n    font-size: 1rem\n    color: hotpink\n</style>\n\n<div class:hello-world>헬로 월드</div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p><inlineCode parentName=\"p\">{`style`}</inlineCode>{` 내부의 코드는 기존의 Sass와 동일하고, class명 불러오는 것은 위에서 CSS 코드를 썼던 것과 같이 `}<inlineCode parentName=\"p\">{`class:className`}</inlineCode>{` 형태로 불러오면 됩니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`emotion, CSS, Sass의 예제는 React와 Svelte 둘만 설명했습니다.`}</p>\n    </blockquote>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`이번 글은 지난 글과 마찬가지로 너무 노잼이었죠?`}</p>\n    <p>{`죄송합니다! `}<em parentName=\"p\">{`(사실은 하나도 안 미안해!)`}</em></p>\n    <p>{`다음 글은 4개의 프레임워크들을 베이스로 한 일종의 확정 프레임워크인 Angular Universal, Next.js, SvelteKit, Nuxt에 대해서 다뤄보겠습니다.`}</p>\n    <p>{`많은 관심 부탁드려요! `}<em parentName=\"p\"><strong parentName=\"em\">{`(솔직히 별로 기대 안되지?)`}</strong></em></p>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20220204/yougyogirl.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20220204/yougyogirl.jpg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>글이 재미없는 건 내가 유교걸이라서... 거 미안하게 됐수다.</figcaption>\n    </figure>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20220204'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = 'Angular, React, Svelte 그리고 Vue로 스타일링 해볼까?'\n  const pageDateTime = '2022.02.04'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const ogAddress = siteAddress + '0/' + pageIdentifier\n  const subTitle = 'Angular, React, Svelte, Vue Styling'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'angular, react, svelte, vue, style, 앵귤러, 리액트, 스벨트, 뷰, 스타일, css'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: ogAddress + '/yougyogirl.jpg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/0/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/0/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        previousAddress={`/20220113`}\n        previousTitle={'Angular, React, Svelte 그리고 Vue를 이용해 개발 찍먹해보기'}\n        nextAddress={`/20220227`}\n        nextTitle={'Angular Universal, Next.js, SveltKit 그리고 Nuxt의 비교!'}\n      />\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["SENDBOX_TITLE","src","title","allow","sandbox","VIDEO_ID","width","height","allowFullScreen","deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","srcSet","uuidv4","type","alt","isMDXComponent","siteAddress","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","ogAddress","subTitle","GatsbySeo","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","previousAddress","previousTitle","nextAddress","nextTitle"],"sourceRoot":""}