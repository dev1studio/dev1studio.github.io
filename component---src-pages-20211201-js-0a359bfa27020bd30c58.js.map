{"version":3,"file":"component---src-pages-20211201-js-0a359bfa27020bd30c58.js","mappings":"mRAUAA,EAAAA,EAAAA,KACO,IACDC,EAAc,CAClBC,aAF0B,IAKb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,WAKT,UAAeJ,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,+BACA,mGACA,kGACA,oBACA,0BACA,0BACA,iCACE,SAAY,QADd,gBAGQ,gBAAMC,WAAW,wBACrB,KAAQ,QADJ,+BAHR,eASA,2BACA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,0BAHR,eAQA,yGACA,8GACA,0BACA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,0CAHR,eASA,2BACA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,qCAHR,eAQA,yFACA,oGACA,uBACF,wBACE,kBAAQC,OAAM,gCAAiCC,EAAAA,EAAAA,KAAYC,KAAK,gBAChE,eAAKC,IAAG,gCAAiCF,EAAAA,EAAAA,KAAYG,IAAI,OAE3D,yCAEE,iCACA,mGACA,iCACE,SAAY,OADd,gBAGQ,gBAAML,WAAW,wBACrB,KAAQ,QADJ,6OAHR,eAkBA,2BACE,aAAGA,WAAW,cAAd,yCAEF,2HACA,iDACA,6HACA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,qGAHR,eAQA,uJACA,sFACA,iCACE,SAAY,QADd,gBAGQ,gBAAMA,WAAW,wBACrB,KAAQ,QADJ,6BAHR,eASA,8EACA,oBACA,+BACA,+HACA,0FACA,sDAAwC,kBAAQA,WAAW,KAAnB,QAAxC,SAKJJ,EAAWU,gBAAiB,E,4CC9D5B,MA1DA,WACE,IAAMC,EAAW,uBACXC,EAAY,oBACZC,EAAY,qBACZC,EAAe,aACfC,EAAiBD,EAAaE,QAAQ,MAAO,IAC7CC,EAAcN,EAAcI,EAC5BG,EAAYP,EAAc,KAAOI,EACjCI,EAAW,sBAEjB,OACE,QAAC,IAAD,MACE,QAAC,EAAAC,UAAD,CACEC,MAAUR,EAAL,MAAoBD,EACzBU,YAAaH,EACbI,UAAWN,EACXO,SAAU,CAAC,CACTC,SAAU,WACVC,QAAS,sCAEXC,UAAW,CACTpB,KAAM,UACNc,MAAOT,EACPU,YAAaT,EACbe,IAAKX,EACLY,OAAQ,CAAC,CAAED,IAAKV,EAAY,yBAGhC,mBAASY,UAAWC,EAAAA,KAClB,kBAAKlB,IACL,qBAAQM,IACR,oBAAOL,IACP,wBACE,kBAAQT,OAAM,MAAQU,EAAR,kBAAuCT,EAAAA,EAAAA,KAAYC,KAAK,gBACtE,eAAKC,IAAG,MAAQO,EAAR,iBAAsCT,EAAAA,EAAAA,KAAYG,IAAI,OAEhE,QAAC,EAAD,OACA,kBAAQqB,UAAWC,EAAAA,IAAnB,UAEF,sBAAO,QAAC,IAAD,QACP,QAAC,IAAD,CACEC,gBAAe,YACfC,cAAe,wCACfC,YAAW,YACXC,UAAW,mBASb,QAAC,IAAD","sources":["webpack://dev1studio/./src/contents/20211201.mdx","webpack://dev1studio/./src/pages/20211201.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`지난 편에서 CSS의 단점이 Class 이름이 중복되게 네이밍을 지을 위험성이 있고 JavaScript와 연동이 어렵다고 언급을 했습니다.`}</p>\n    <p>{`CSS Module은 개발자가 부여한 class 이름 뒤에 숫자나 알파벳이 자동으로 부여하여 class 이름이 중복되는 것을 방지합니다.`}</p>\n    <hr></hr>\n    <h2>{`CSS`}</h2>\n    <p>{`CSS.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`h1 {\n  font-weight: 700\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Sass.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"sass\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`h1\n  font-weight: 700`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`이 코드에서는 클래스 선택자 없이 h1 태그 단독 스타일을 넣었습니다. 이렇게 작성하면 모든 h1에 대해 font-weight: 700이 적용됩니다.`}</p>\n    <p>{`전역(Global)적으로 적용하고 싶다면 이렇게 쓰는 게 맞습니다. 앞에 .container 같은 클래스 선택자를 사용해도 이론상으로는 전역적으로 작동합니다.`}</p>\n    <p>{`CSS.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`.container h1 {\n  font-weight: 700\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Sass.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"sass\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`.container h1\n  font-weight: 700`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`어떤 페이지, 어떤 컴포넌트던지 .container 안에 h1이 사용된다면 font-weight: 700이 적용되니까요.`}</p>\n    <p>{`하지만 페이지마다 .container가 있고 h1이 있지만 모두 스타일이 다르다면? 머리에 쥐가나고 없던 두통이 오는 느낌적 느낌이 듭니다.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/0/20211201/headattact.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/0/20211201/headattact.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>머리가 아파오는군</figcaption>\n    </figure>\n    <h2>{`CSS Module`}</h2>\n    <p>{`보통은 페이지 네임이 붙은 클래스 또는 id를 상단에 붙여서 쓰게 될 겁니다. 이것을 방지하기 위해서 나온 게 CSS Module 입니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`import styles from './index.module.css'\n\nfunction App() {\n  return (\n    <>\n      <div className='Container'><h1>blah</h1></div>\n      <div className={styles.Container}><h1>blah</h1></div>\n    </>\n  )\n}\n\nexport default App`}</code>{`\n        `}</deckgo-highlight-code>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Sass인 경우에는 .css 대신 .sass로 변경하면 됩니다.`}</p>\n    </blockquote>\n    <p>{`className='Container'는 index.css 또는 index.sass에서 사용된 .Container의 코드를 가져옵니다. 이 방식은 종전 방식대로 전역으로 불러옵니다.`}</p>\n    <p>{`즉, 모든 페이지, 모든 컴포넌트에서 불러옵니다.`}</p>\n    <p>{`뒤에 작성된 className={styles.Container}는 현 컴포넌트에서만 사용됩니다. 개발자 인스펙터에서 해당 부분을 확인해보면 다음처럼 컴파일 된 것을 확인할 수 있습니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"html\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`<div class=\"Container\"><h1>blah</h1></div>\n<div class=\"app_Container__2ls0j\"><h1>blah</h1></div>`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`전자는 CSS Module을 사용하지 않은 것(전역 설정)이고, 후자는 CSS Module을 사용한 것입니다. class 이름이 컴포넌트명_클레스명__랜덤값 형태로 붙어서 전역 처리되는 것을 방지하고 있는 것을 확인할 수 있습니다.`}</p>\n    <p>{`주의할 것은, CSS Module로 작성하더라도 태그(Element) 단독으로 작성되면 전역으로 적용된다는 겁니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`a {\n  font-size: 2rem\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위 코드는 CSS Module로 작성되었지만 a 태그 앞에 선택자가 없기 때문에 전역으로 적용됩니다.`}</p>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`퍼블리셔, 프론트엔드 개발자들은 늘 전역으로 적용되면 안되는 것을 어떻게 사이드이펙트 없이 적용할 것인가에 대해 해결하려 노력해 왔는데 CSS Module이 고민을 한방에 해결해 줬습니다.`}</p>\n    <p>{`이전 포스팅에서 emotion에 대해 설명하는 글을 썼었는데 emotion에 대해 관심이 있다면 이전 포스팅도 확인하세요!`}</p>\n    <p>{`그럼 이만 이번 편을 마치고 다음 편에서 만나요! 다음 편 `}<strong parentName=\"p\">{`관많부!`}</strong>{` : )`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\n// import { Disqus } from 'gatsby-plugin-disqus'\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20211201'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = 'CSS와 CSS Module 비교'\n  const pageDateTime = '2021.12.01'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const ogAddress = siteAddress + '0/' + pageIdentifier\n  const subTitle = '부제: 재귀적 inherit의 굴레'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'style, CSS, Module, 스타일, 모듈, 퍼블리싱'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: ogAddress + '/headattact.jpeg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/0/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/0/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        previousAddress={`/20211015`}\n        previousTitle={'메타버스 프레임워크! Meta React & React Native'}\n        nextAddress={`/20211205`}\n        nextTitle={'macOS 필수 설치 앱'}\n      />\n      {/* <Disqus\n        config={{\n          url: pageAddress,\n          identifier: pageIdentifier,\n          title: pageTitle,\n        }}\n      /> */}\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","srcSet","uuidv4","type","src","alt","isMDXComponent","siteAddress","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","ogAddress","subTitle","GatsbySeo","title","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","previousAddress","previousTitle","nextAddress","nextTitle"],"sourceRoot":""}