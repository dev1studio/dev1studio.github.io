"use strict";(self.webpackChunkdev1studio=self.webpackChunkdev1studio||[]).push([[5556],{8853:function(e,t,n){n(7294);var l=n(3431);t.Z=function(e){var t=e.SENDBOX_TITLE;return(0,l.tZ)("iframe",{src:"https://codesandbox.io/embed/github/naninyang/"+t+"/tree/main/?fontsize=14&hidenavigation=1&theme=dark",title:""+t,allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})}},2929:function(e,t,n){n(7294);var l=n(3431);t.Z=function(e){var t=e.VIDEO_ID;return(0,l.tZ)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/"+t,title:"YouTube video player",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})}},2259:function(e,t,n){n.r(t),n.d(t,{default:function(){return y}});n(7294);var l=n(9789),o=n(4125),a=n(8678),i=n(3579),s=n(7462),c=n(3366),r=n(4983),p=(n(2929),n(8853),n(2844),n(2335),n(6480)),d=["components"];(0,p.q)();var g={_frontmatter:{}};function h(e){var t=e.components,n=(0,c.Z)(e,d);return(0,r.kt)("wrapper",(0,s.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Prologue"),(0,r.kt)("p",null,"이번 글에서는 Angular, React, Svelte, 그리고 Vue에서는 어떻게 스타일링 코드를 작성해야하는지, CSS 파일은 어떻게 작성해야하는지 알려드립니다."),(0,r.kt)("p",null,"이 글은 원래 지난 글에 통합할 예정이었는데 생각보다 지난 글 내용이 너무 길어져서 분리했습니다."),(0,r.kt)("p",null,"이 글은 지난 글과 마찬가지로 포스타입에 올렸던 글을 통합한 글이며, 스타일과 CSS로 각각 분리되어있던 내용을 하나로 합친 글입니다."),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Inline 방식"),(0,r.kt)("p",null,"If, HTML"),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'<p style="color: hotpink; font-size: 1rem">헬로 월드</p>'),"\n        "),(0,r.kt)("p",null,"If, Angular"),(0,r.kt)("p",null,"위 HTML 방식처럼 ",(0,r.kt)("inlineCode",{parentName:"p"},'style="..."')," 방식을 사용할 수도 있고, 아래와 같이 class형을 사용할 수도 있습니다."),(0,r.kt)("deckgo-highlight-code",{language:"typescript"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"@Component({\n  selector: 'app-hello',\n  template: '<p [style.color]=\"color\" [style.fontSize]=\"fontSize\">헬로 월드</p>',\n  styles: [],\n})\nexport class HelloWorldComponent implements OnInit {\n  color: string = 'hotpink';\n  fontSize: string = '1rem';\n}"),"\n        "),(0,r.kt)("p",null,"If, React"),(0,r.kt)("p",null,"방식 #1."),(0,r.kt)("deckgo-highlight-code",{language:"jsx"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"function HelloWorldComponent() {\n  return <div style={{ color: 'hotpink', fontSize: '1rem' }}>헬로 월드</div>\n}"),"\n        "),(0,r.kt)("p",null,"방식 #2."),(0,r.kt)("deckgo-highlight-code",{language:"jsx"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"const styleObject = {\n  color: 'hotpink',\n  fontSize: '1rem',\n};\n\nfunction HelloWorldComponent() {\n  return <div style={styleObject}>헬로 월드</div>\n}"),"\n        "),(0,r.kt)("p",null,"If, Svelte"),(0,r.kt)("p",null,"Svelte도 Angular처럼 HTML 예제와 같은 방식으로 인라인 스타일을 구현할 수 있습니다. 참고하세요."),(0,r.kt)("p",null,"방식 #1."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'\x3c!-- Parent Component --\x3e\n<script>\n  import Styling from \'./Styling.svelte\';\n<\/script>\n\n<Styling color="hotpink" fontSize="1rem" />\n\n\x3c!-- Styling Component --\x3e\n<script>\n  export let color;\n  export let fontSize;\n<\/script>\n\n<p style="color: {color}; font-size: {fontSize}">\n  헬로 월드\n</p>'),"\n        "),(0,r.kt)("p",null,"방식 #2."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"\x3c!-- Parent Component --\x3e\n<script>\n  import StyleObject from './StyleObject.svelte';\n<\/script>\n\n<StyleObject ref=\"hotpink\" />\n\n<style>\n  :global([ref=hotpink]) {\n    color: hotpink;\n    font-size: 1rem;\n  }\n</style>\n\n\x3c!-- StyleObject Component --\x3e\n<script>\n  export let ref;\n<\/script>\n\n<p {ref}>\n  헬로 월드\n</p>"),"\n        "),(0,r.kt)("p",null,"If, Vue"),(0,r.kt)("p",null,"방식 #1."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<div v-bind:style=\"{ color: color, fontSize: fontSize + 'rem' }\">헬로 월드</div>\n<script>\n  data: {\n    color: 'hotpink',\n    fontSize: 1\n  }\n<\/script>"),"\n        "),(0,r.kt)("p",null,"방식 2."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<div v-bind:style=\"styleObject\">헬로 월드</div>\n<script>\n  data: {\n    styleObject: {\n      color: 'hotpink',\n      fontSize: '1rem'\n    }\n  }\n<\/script>"),"\n        "),(0,r.kt)("h2",null,"emotion 사용하기"),(0,r.kt)("p",null,"If, React"),(0,r.kt)("p",null,"형태는 inline과 비슷한데 차이점이라면 변수 자체가 태그처럼 사용된다는 점입니다."),(0,r.kt)("deckgo-highlight-code",{language:"jsx"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"const HelloWorld = styled.div({\n  fontSize: '1rem',\n  color: 'hotpink',\n})\n\nfunction Home() {\n  return <HelloWorld>헬로 월드</HelloWorld>\n}\n\nexport default Home"),"\n        "),(0,r.kt)("p",null,"If, Svelte"),(0,r.kt)("p",null,"Svelte에서는 React와 다르게 변수 형태로 사용 가능합니다."),(0,r.kt)("p",null,"그리고 React에서는 emotion을 위 예제처럼 return하는 파일에 포함해서 작성이 가능하지만 Svelte에서는 따로 ",(0,r.kt)("inlineCode",{parentName:"p"},".js")," 파일로 분리해야한다는 점이 존재합니다."),(0,r.kt)("p",null,"또한 ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.tag({})"),"가 아니라 ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," 형태로만 작성이 가능합니다."),(0,r.kt)("deckgo-highlight-code",{language:"javascript"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"// styles.js\n\nconst { css } = emotion;\n\nexport const helloWorld = css`\n  font-size: 1rem;\n  color: hotpink\n`;"),"\n        "),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<script>\n  import { helloWorld } from './styles.js';\n<\/script>\n\n<div class=\"{helloWorld}\">헬로 월드</div>"),"\n        "),(0,r.kt)("p",null,"emotion이 class 이름 형태로 사용되기 때문에 class를 2개 이상 사용하여 조합이 가능합니다."),(0,r.kt)("deckgo-highlight-code",{language:"javascript"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"// styles.js\n\nconst { css } = emotion;\n\nexport const hello = css`\n  font-size: 1rem\n`;\n\nexport const world = css`\n  color: hotpink\n`;"),"\n        "),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<script>\n  import { hello, world } from './styles.js';\n<\/script>\n\n<div class=\"{hello} {world}\">헬로 월드</div>"),"\n        "),(0,r.kt)("h2",null,"Global CSS"),(0,r.kt)("p",null,"React와 Next.js에서는 대개 ",(0,r.kt)("inlineCode",{parentName:"p"},"global.css"),"라는 파일명을 사용합니다. 따로 설정이 필요하지 않습니다."),(0,r.kt)("p",null,"Sass 사용시 ",(0,r.kt)("inlineCode",{parentName:"p"},"global.sass")," 파일명을 사용하면 됩니다. 다만, React에서 Sass 사용시 추가로 import 해야하는 패키지가 있습니다."),(0,r.kt)("p",null,"이 패키지에 대해서는 아래 Sass 설명 부분을 참고하세요."),(0,r.kt)("deckgo-highlight-code",{language:"scss"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},".hello-world {\n  font-size: 1rem;\n  color: hotpink;\n}"),"\n        "),(0,r.kt)("p",null,"Svelte에서는 ",(0,r.kt)("inlineCode",{parentName:"p"},".css")," 파일을 따로 사용하지 않고 ",(0,r.kt)("inlineCode",{parentName:"p"},".svelte")," 내부에서 ",(0,r.kt)("inlineCode",{parentName:"p"},":global(선택자)")," 형태로 작성됩니다. (",(0,r.kt)("inlineCode",{parentName:"p"},"Vue")," 동일)"),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<style>\n  :global(.hello-world) {\n    font-size: 1rem;\n    color: hotpink\n  }\n</style>"),"\n        "),(0,r.kt)("h2",null,"CSS 사용하기"),(0,r.kt)("p",null,"React에서는 Global CSS가 아닌 CSS 즉, CSS Module이 아니어도 CSS 파일 import가 가능합니다. 이렇게 했을 때는 className이 중복 사용되어 유지보수가 힘들어지는 부분을 간과하면 안됩니다."),(0,r.kt)("p",null,"Next.js는 Global CSS가 아닌 이상은 CSS Module 형태로만 사용이 가능합니다."),(0,r.kt)("deckgo-highlight-code",{language:"jsx"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"// className={componentName.camelCase} 또는 className={componentName['kabob-case']}\nimport styles from './HelloWorld.module.css'\n\nfunction Home() {\n  return <div className={styles['hello-world']}>헬로 월드</div>\n}\n\nexport default Home"),"\n        "),(0,r.kt)("p",null,"주석으로 설명했지만 하이픈(-)을 사용할 게 아니라면 ",(0,r.kt)("inlineCode",{parentName:"p"},"componentName.camelCase")," 형태도 가능하지만 하이픈을 사용할 거라면 반드시 ",(0,r.kt)("inlineCode",{parentName:"p"},"componentName['kabob-case']")," 형태를 사용해야 합니다."),(0,r.kt)("p",null,"다음은 2개 이상의 className을 사용하는 예제입니다."),(0,r.kt)("deckgo-highlight-code",{language:"jsx"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"import styles from './HelloWorld.module.css'\n\nfunction Home() {\n  return <div className={`${styles.hello} ${styles.world}`}>헬로 월드</div>\n}\n\nexport default Home"),"\n        "),(0,r.kt)("p",null,"Svelte에서는 Global이 아닌 CSS 형태의 코드는 알아서 CSS Module 형태로 동작합니다. 단, ",(0,r.kt)("inlineCode",{parentName:"p"},'class="..."')," 형태가 아닌 ",(0,r.kt)("inlineCode",{parentName:"p"},"class:...")," 형태로 불러와야 합니다."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<style>\n  .hello-world {\n    font-size: 1rem;\n    color: hotpink\n  }\n</style>\n\n<div class:hello-world>헬로 월드</div>"),"\n        "),(0,r.kt)("p",null,"class를 여러개 쓰기 위해서는 ",(0,r.kt)("inlineCode",{parentName:"p"},"class:name1 name2"),"라던가 ",(0,r.kt)("inlineCode",{parentName:"p"},"class:name1+name2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"class:name1,name2"),"가 아닌 ",(0,r.kt)("inlineCode",{parentName:"p"},"class:name1 class:name2"),"처럼 써야 합니다."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"<style>\n  .hello {\n    font-size: 1rem;\n  }\n  .world {\n    color: hotpink;\n  }\n</style>\n\n<div class:hello class:world>헬로 월드</div>"),"\n        "),(0,r.kt)("h2",null,"Sass 사용하기"),(0,r.kt)("p",null,"React는 ",(0,r.kt)("inlineCode",{parentName:"p"},"sass")," 패키지가 필요합니다."),(0,r.kt)("p",null,"파일을 불러올 때는 ",(0,r.kt)("inlineCode",{parentName:"p"},".css"),"가 아닌 ",(0,r.kt)("inlineCode",{parentName:"p"},".sass")," 파일을 import 해야 합니다."),(0,r.kt)("deckgo-highlight-code",{language:"shell"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"## npm\n$ npm i -D sass\n\n## Yarn\n$ yarn add -D sass"),"\n        "),(0,r.kt)("p",null,"Svelte에서는 ",(0,r.kt)("inlineCode",{parentName:"p"},"sass"),"가 아닌 ",(0,r.kt)("inlineCode",{parentName:"p"},"node-sass"),"를 씁니다."),(0,r.kt)("deckgo-highlight-code",{language:"shell"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"## npm\n$ npm i -D svelte-preprocess node-sass\n\n## Yarn\n$ yarn add -D svelte-preprocess node-sass"),"\n        "),(0,r.kt)("p",null,"React와 Next.js에서는 sass관련해서 최신 버전이라면 따로 추가 세팅이 필요 없는데 Svelte에서는 ",(0,r.kt)("inlineCode",{parentName:"p"},"svelte-preprocess")," 패키지를 활용해야 하므로 추가 세팅이 필수입니다."),(0,r.kt)("deckgo-highlight-code",{language:"javascript"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},"// rollup.config.js\n\n// 상단에 추가\nimport autoPreprocess from 'svelte-preprocess';\n\n// plugins preprocess 추가\nexport default {\n  plugins: [\n    svelte({\n      preprocess: autoPreprocess(),\n      ...\n    })\n  ]\n}"),"\n        "),(0,r.kt)("p",null,"Svelte는 ",(0,r.kt)("inlineCode",{parentName:"p"},".sass"),"파일을 import해서 사용하는 게 아니라 inline 형태로 불러와야 하기 때문에 type 세팅이 들어가야 합니다."),(0,r.kt)("deckgo-highlight-code",{language:"html"},"\n          ",(0,r.kt)("code",{parentName:"deckgo-highlight-code",slot:"code"},'<style type="text/sass">\n  .hello-world\n    font-size: 1rem\n    color: hotpink\n</style>\n\n<div class:hello-world>헬로 월드</div>'),"\n        "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"style")," 내부의 코드는 기존의 Sass와 동일하고, class명 불러오는 것은 위에서 CSS 코드를 썼던 것과 같이 ",(0,r.kt)("inlineCode",{parentName:"p"},"class:className")," 형태로 불러오면 됩니다."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"emotion, CSS, Sass의 예제는 React와 Svelte 둘만 설명했습니다.")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Epilogue"),(0,r.kt)("p",null,"이번 글은 지난 글과 마찬가지로 너무 노잼이었죠?"),(0,r.kt)("p",null,"죄송합니다! ",(0,r.kt)("em",{parentName:"p"},"(사실은 하나도 안 미안해!)")),(0,r.kt)("p",null,"다음 글은 4개의 프레임워크들을 베이스로 한 일종의 확정 프레임워크인 Angular Universal, Next.js, SvelteKit, Nuxt에 대해서 다뤄보겠습니다."),(0,r.kt)("p",null,"많은 관심 부탁드려요! ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"(솔직히 별로 기대 안되지?)"))),(0,r.kt)("figure",null,(0,r.kt)("picture",null,(0,r.kt)("source",{srcSet:"/0/20220204/yougyogirl.webp?"+(0,l.Z)(),type:"image/webp"}),(0,r.kt)("img",{src:"/0/20220204/yougyogirl.jpg?"+(0,l.Z)(),alt:""})),(0,r.kt)("figcaption",null,"글이 재미없는 건 내가 유교걸이라서... 거 미안하게 됐수다.")))}h.isMDXComponent=!0;var k=n(4396),m=n(5941),u=n(9289),S=n(3431);var y=function(){var e="https://dev1stud.io/",t="O612 DEV1L.studio",n="Angular, React, Svelte 그리고 Vue로 스타일링 해볼까?",s="2022.02.04",c=s.replace(/\./g,""),r=e+c,p=e+"0/"+c,d="Angular, React, Svelte, Vue Styling";return(0,S.tZ)(a.Z,null,(0,S.tZ)(o.GatsbySeo,{title:n+" | "+t,description:d,canonical:r,metaTags:[{property:"keywords",content:"angular, react, svelte, vue, style, 앵귤러, 리액트, 스벨트, 뷰, 스타일, css"}],openGraph:{type:"article",title:t,description:n,url:r,images:[{url:p+"/yougyogirl.jpg"}]}}),(0,S.tZ)("article",{className:i.xI},(0,S.tZ)("h1",null,n),(0,S.tZ)("small",null,d),(0,S.tZ)("time",null,s),(0,S.tZ)("picture",null,(0,S.tZ)("source",{srcSet:"/0/"+c+"/summary.webp?"+(0,l.Z)(),type:"image/webp"}),(0,S.tZ)("img",{src:"/0/"+c+"/summary.png?"+(0,l.Z)(),alt:""})),(0,S.tZ)(h,null),(0,S.tZ)("strong",{className:i.zs},"FIN!")),(0,S.tZ)("aside",null,(0,S.tZ)(k.Z,null)),(0,S.tZ)(m.Z,{previousAddress:"/20220113",previousTitle:"Angular, React, Svelte 그리고 Vue를 이용해 개발 찍먹해보기",nextAddress:"/20220227",nextTitle:"Angular Universal, Next.js, SvelteKit 그리고 Nuxt의 비교!"}),(0,S.tZ)(u.Z,null))}}}]);
//# sourceMappingURL=component---src-pages-20220204-js-5623f243d5ea83867863.js.map