{"version":3,"file":"component---src-pages-20211211-js-da0707af49171a8b1820.js","mappings":"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","sources":["webpack://dev1studio/./src/contents/20211211.mdx","webpack://dev1studio/./src/pages/20211211.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`ReactJS(이하 React)와 React Native(이하 RN)에서 사용하는 패키지가 RN에서는 추가로 더 설치해야 하는 dependency가 있을 수 있습니다. 이 차이는 RN이 Native라서 발생합니다.`}</p>\n    <p>{`이번에 비교해 볼 것은, emotion과 styled-components 설치 및 적용 방법할 때 존재하는 차이점입니다.`}</p>\n    <hr></hr>\n    <h2>{`styled-components`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i styled-components\n\n# Npm w/ TypeScript\n$ npm i styled-components && npm i -D @types/styled-components\n\n# Yarn\n$ yarn add styled-components\n\n# Yarn w/ TypeScript\n$ yarn add styled-components && yarn add -D @types/styled-components`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`styled-components 패키지 설치시 `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{`인지 아닌지에 따라서 `}<inlineCode parentName=\"p\">{`@types`}</inlineCode>{`로 시작하는 패키지를 쓸 것인지 아닌지의 차이 정도만 차이가 생깁니다.`}</p>\n    <p><strong parentName=\"p\">{`React와 RN 사이의 차이점이 없습니다.`}</strong>{` `}<em parentName=\"p\">{`성`}</em>{`동일`}</p>\n    <p>{`다만, TypeScript로 작업하실 때 RN에서는 다음과 같이 추가 패키지가 필요합니다. (TypeScript 환경 사용할 생각이 아니라면 아래 과정은 스킵)`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm w/ TypeScript\n$ npm i @types/styled-components-react-native\n\n# Yarn w/ TypeScript\n$ yarn add @types/styled-components-react-native`}</code>{`\n        `}</deckgo-highlight-code>\n    <blockquote>\n      <p parentName=\"blockquote\">{`다음과 같이 패키지 여러개를 한번에 입력하여 설치 또는 삭제가 가능합니다.`}</p>\n    </blockquote>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm w/ TypeScript\n$ npm i styled-components && npm i -D @types/styled-components @types/styled-components-react-native\n\n# Yarn w/ TypeScript\n$ yarn add styled-components && yarn add -D @types/styled-components @types/styled-components-react-native`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`.jsx 또는 .tsx에서 import 할 때 불러오는 방법이 다릅니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// React\nimport styled from 'styled-components'\n\n// RN\nimport styled from 'styled-components/native'`}</code>{`\n        `}</deckgo-highlight-code>\n    <h2>{`emotion`}</h2>\n    <figure>\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/779jxjHopk0\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen />\n  <figcaption><del>(이거 말고)</del></figcaption>\n    </figure>\n    <p>{`O612는 emotion을 사랑하는데 RN 처음 작업할 때 emotion으로 스타일링 하는 방법을 모르겠어서 엄청 헤맸던 기억이 있습니다.`}</p>\n    <p>{`RN에서도 React에서 작업할 때와 똑같이 설치하고 컴포넌트 import 했더니 에러가 뙇!!! `}<em parentName=\"p\">{`나에게 이러지마 ㅠㅠ`}</em></p>\n    <p>{`찾아보니 `}<inlineCode parentName=\"p\">{`@emotion/native`}</inlineCode>{`가 추가로 필요하다는 사실을 알았습니다.`}</p>\n    <p>{`RN이 native 환경이라서 다르게 동작하는 것으로 추측됩니다.`}</p>\n    <p>{`설치는 React, RN 공통 사항 먼저 짚어볼게요.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`styled-components와 다르게 emotion은 TypeScript라고 해서 추가로 설치해야하는 패키지는 없습니다.`}</p>\n    </blockquote>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i @emotion/react\n\n# Yarn\n$ yarn add @emotion/react`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`React에서는 styled라는 패키지가 필요하고, RN에서는 native라는 패키지가 필요합니다.`}</p>\n    <p>{`React.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i @emotion/styled\n\n# Yarn\n$ Yarn add @emotion/styled`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위 명령어는 다음과 같이 `}<inlineCode parentName=\"p\">{`@emotion/react`}</inlineCode>{` 패키지를 함께 설치할 수 있습니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i @emotion/react @emotion/styled\n\n# Yarn\n$ yarn add @emotion/react @emotion/styled`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`RN.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i @emotion/native\n\n# Yarn\n$ Yarn add @emotion/native`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위 명령어는 다음과 같이 `}<inlineCode parentName=\"p\">{`@emotion/react`}</inlineCode>{` 패키지를 함께 설치할 수 있습니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"shell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`# Npm\n$ npm i @emotion/react @emotion/native\n\n# Yarn\n$ yarn add @emotion/react @emotion/native`}</code>{`\n        `}</deckgo-highlight-code>\n    <blockquote>\n      <p parentName=\"blockquote\">{`React에서는 `}<inlineCode parentName=\"p\">{`@emotion/native`}</inlineCode>{` 패키지를 설치하면 안되고, RN에서는 `}<inlineCode parentName=\"p\">{`@emotion/styled`}</inlineCode>{` 패키지를 설치하면 안됩니다.`}</p>\n      <p parentName=\"blockquote\">{`( RN의 `}<inlineCode parentName=\"p\">{`@emotion/native`}</inlineCode>{` 패키지에 styled가 포함되어 있습니다. )`}</p>\n    </blockquote>\n    <p>{`emotion 또한 styled-components 처럼 import 방법이 다릅니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`// React\nimport styled from '@emotion/styled'\n\n// RN\nimport styled from '@emotion/native'`}</code>{`\n        `}</deckgo-highlight-code>\n    <figure>\n  <picture>\n    <source srcSet={`/20211211/easy.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/20211211/easy.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>참 쉽죠오~?</figcaption>\n    </figure>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`갓 태어난 아이도 이해할 수 있을 정도로 친절하게 설명해 드렸으니 오늘은 끝!`}</p>\n    <p>{`언젠가 기회가 된다면 사용 예제를 들고 올게요-`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20211211'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = 'ReactJS와 React Native에서 emotion & styled-components 써보기'\n  const pageDateTime = '2021.12.11'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const subTitle = '근데 TypeScript를 곁들인'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'react, reactjs, reactnative, emotion, styled-components, 리액트, 리액트네이티브, 이모션, 스타일드, 컴포넌트'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: pageAddress + '/easy.jpeg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        previousAddress={`/20211210`}\n        previousTitle={'한글이나 히라가나 등의 non-English 언어로 변수명을 작명해도 동작할까?'}\n        nextAddress={`/20211212`}\n        nextTitle={'Apple Silicon macOS에 Homebrew 설치하기기'}\n      />\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","width","height","src","title","allow","allowFullScreen","srcSet","uuidv4","type","alt","isMDXComponent","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","subTitle","GatsbySeo","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","previousAddress","previousTitle","nextAddress","nextTitle"],"sourceRoot":""}