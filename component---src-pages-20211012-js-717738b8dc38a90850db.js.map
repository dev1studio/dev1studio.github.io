{"version":3,"file":"component---src-pages-20211012-js-717738b8dc38a90850db.js","mappings":"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","sources":["webpack://dev1studio/./src/contents/20211012.mdx","webpack://dev1studio/./src/pages/20211012.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport \"@deckdeckgo/highlight-code\";\nimport { defineCustomElements as deckDeckGoHighlightElement } from \"@deckdeckgo/highlight-code/dist/loader\";\ndeckDeckGoHighlightElement();\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Prologue`}</h2>\n    <p>{`마크업(Mark-up; HTML)을 Styling하는 가장 고전적이고 흔히 사용하는 방법이 CSS 입니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`CSS`}</inlineCode>{`는 3가지 방법으로 작성할 수 있습니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`style`}</inlineCode>{` 태그를 사용하는 방법, 태그(Element) 안에 `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` 속성(Property)을 사용하는 방법, 마지막으로 `}<inlineCode parentName=\"p\">{`.css`}</inlineCode>{` 확장자를 사용하는 파일을 사용해 작성하는 방법.`}</p>\n    <p>{`CSS의 단점은 Class 이름이 중복되게 네이밍을 지을 위험성이 있고 JavaScript와 연동이 어렵다는 점입니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`CSS-in-JS`}</inlineCode>{`는 JavaScript 언어로 CSS를 코딩하는 것을 말합니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`“CSS-in-JS”는 외부의 파일에 CSS를 정의하는 대신에 JavaScript와 결합하는 패턴을 의미합니다.`}</p>\n      <p parentName=\"blockquote\">{`( 출처: reactjs.org )`}</p>\n    </blockquote>\n    <p>{`CSS Pre-processor 즉, CSS 전처리기 종류에는 `}<inlineCode parentName=\"p\">{`Scss`}</inlineCode>{`(SCSS/SASS), `}<inlineCode parentName=\"p\">{`Stylus`}</inlineCode>{` 등이 있는데 가장 많이 사용되고 있는 것은 SCSS 이며 그 뒤를 SASS, Stylus가 따라가고 있습니다. (한국 기준이며, 해외에서는 Stylus가 많이 쓰임)`}</p>\n    <p>{`CSS-in-JS를 사용하거나 CSS 전처리기 및 CSS의 Module형으로 사용시 CSS의 단점들을 보완할 수 있습니다.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/20211012/followme.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/20211012/followme.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>따라와~ 왜 안와~</figcaption>\n    </figure>\n    <hr></hr>\n    <h2>{`CSS-in-JS`}</h2>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`const Name = styled.cite({\n  fontSize: '1rem',\n  fontWeight: '500',\n  fontStyle: 'normal',\n});\n\nfunction App() {\n  return <Name>홍길동</Name>;\n}\n\nexport default App`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위 예제는 emotion의 styled로 작성한 코드입니다. 기존 CSS로 style을 작성하는 것과 많이 다르죠.`}</p>\n    <p>{`emotion의 styled는 react의 inline style과 비슷합니다. property는 camelCase, value는 따옴표로 감싸서 사용합니다. 마지막은 ','(콤마)를 사용합니다. (value에 숫자만 존재한다면 따옴표 생략이 가능하지만 font weight의 value는 실제로는 numberic이 아니기 때문에 font weight에서 만큼은 따옴표를 생략하면 안됨)`}</p>\n    <p>{`CSS-in-JS는 emotion 말고도 styled-components가 있는데 styled-components는 형식이 CSS 작성법과 매우 유사합니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"jsx\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`const Name = styled.cite\\`\n  font-size: 1rem;\n  font-weight: 500;\n  font-style: normal;\n\\`;\n\nfunction App() {\n  return <Name>홍길동</Name>;\n}\n\nexport default App`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`emotion은 애초에 JavaScript 문법을 따르기 때문에 style의 property, value에 문법 오류가 발생하면 자동으로 체크합니다.`}</p>\n    <h2>{`CSS Pre-processor`}</h2>\n    <p>{`SCSS는 문법이 기존 CSS와 매우 유사합니다. SASS는 끝의 ';'(세미콜론) 그리고 '{', '}'(중괄호)로 감싸는 것이 생략된 버전이고 Stylus는 여기서 property와 value 사이의 ':'(콜론) 까지 생략된 버전입니다. 셀렉터와 셀렉터 사이의 ','(콤마) 까지도 생략 가능하죠. (단, 줄바꿈 시에만)`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"sass\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite.name\n  font-size: 1rem\n  font-weight: 500\n  font-style: normal`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`SASS 예제입니다. '{', '}'(중괄호), ';'(세미콜론)이 생략된 것을 볼 수 있습니다. 그런데 '생략 가능'이 아니라 강제 사항입니다. 오히려 기존 방식으로 작성하면 구문 오류입니다. 들여쓰기는 2 spaces 입니다.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"stylus\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite.name\n  font-size 1rem\n  font-weight 500\n  font-style normal`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위는 Stylus 예제입니다. '{', '}'(중괄호), ';'(세미콜론) 생략에 이어 ':'(콜론)도 생략되었습니다. (':' 생략은 선택 사항입니다)`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"stylus\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite\ni\n  font-style normal`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위의 Stylus 코드를 CSS로 컴파일하면`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite,\ni {\n    font-style: normal;\n}`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`이와 같이 컴파일됩니다.`}</p>\n    <p>{`Sass는 ','(콤마) 생략이 안되기 때문에,`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"sass\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite\ni\n  font-style: normal`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`위와 같이 작성하면`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"scss\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`cite { }\ni { font-style: normal }`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`이렇게 컴파일 됩니다.`}</p>\n    <figure>\n  <picture>\n    <source srcSet={`/20211012/losse.webp?${uuidv4()}`} type=\"image/webp\" />\n    <img src={`/20211012/losse.jpeg?${uuidv4()}`} alt='' />\n  </picture>\n  <figcaption>너무 길어서 근손실 올 기세</figcaption>\n    </figure>\n    <hr></hr>\n    <h2>{`Epilogue`}</h2>\n    <p>{`간략하게 셋을 비교해봤는데 어떠신가요? 이해하기 어렵지 않았을거라고 생각해요.`}</p>\n    <p>{`여기까지는 찍먹 수준이었으니까요.`}</p>\n    <p>{`다음편에서는 CSS와 CSS module(*.module.css)를 비교할 예정입니다. 다음 편 `}<strong parentName=\"p\">{`관많부 관많부!`}</strong>{` : )`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport { GatsbySeo } from \"gatsby-plugin-next-seo\"\n// import { Disqus } from 'gatsby-plugin-disqus'\nimport Container from '../components/layout'\nimport * as styles from '../styles/Articles.module.sass'\nimport Article from '../contents/20211012'\nimport Profile from '../components/pages/profile.js'\nimport Pager from '../components/pages/pager'\nimport PostComment from '../components/utilities/utterances'\n\nfunction ArticlePage() {\n  const siteAddress = `https://dev1stud.io/`\n  const siteTitle = 'O612 DEV1L.studio'\n  const pageTitle = 'CSS, CSS-in-JS 그리고 CSS Pre-processor의 비교'\n  const pageDateTime = '2021.10.12'\n  const pageIdentifier = pageDateTime.replace(/\\./g, '')\n  const pageAddress = siteAddress + pageIdentifier\n  const subTitle = 'emotion, styled-components 그리고 Sass, CSS의 비교'\n\n  return (\n    <Container>\n      <GatsbySeo\n        title={`${pageTitle} | ${siteTitle}`}\n        description={subTitle}\n        canonical={pageAddress}\n        metaTags={[{\n          property: 'keywords',\n          content: 'style, CSS, Sass, emotion, styled-components, 스타일, 이모션, 퍼블리싱'\n        }]}\n        openGraph={{\n          type: 'article',\n          title: siteTitle,\n          description: pageTitle,\n          url: pageAddress,\n          images: [{ url: pageAddress + '/losse.jpeg' }],\n        }}\n      />\n      <article className={styles['articlePage']}>\n        <h1>{pageTitle}</h1>\n        <small>{subTitle}</small>\n        <time>{pageDateTime}</time>\n        <picture>\n          <source srcSet={`/${pageIdentifier}/summary.webp?${uuidv4()}`} type=\"image/webp\" />\n          <img src={`/${pageIdentifier}/summary.png?${uuidv4()}`} alt='' />\n        </picture>\n        <Article />\n        <strong className={styles['articleFIN']}>FIN!</strong>\n      </article>\n      <aside><Profile /></aside>\n      <Pager\n        nextAddress={`/20211015`}\n        nextTitle={'메타버스 프레임워크! Meta React & React Native'}\n      />\n      {/* <Disqus\n        config={{\n          url: pageAddress,\n          identifier: pageIdentifier,\n          title: pageTitle,\n        }}\n      /> */}\n      <PostComment />\n    </Container>\n  )\n}\n\nexport default ArticlePage\n"],"names":["deckDeckGoHighlightElement","layoutProps","_frontmatter","MDXContent","components","props","mdxType","parentName","srcSet","uuidv4","type","src","alt","isMDXComponent","siteTitle","pageTitle","pageDateTime","pageIdentifier","replace","pageAddress","subTitle","GatsbySeo","title","description","canonical","metaTags","property","content","openGraph","url","images","className","styles","nextAddress","nextTitle"],"sourceRoot":""}